'''Задача "Многопроцессное считывание":
Необходимо считать информацию из нескольких файлов одновременно,
используя многопроцессный подход.
Подготовка:
Скачайте архив с файлами для считывания данных и распакуйте его в проект
для дальнейшего использования.
Выполнение:
Создайте функцию read_info(name), где name - название файла.
Функция должна:
Создавать локальный список all_data.
Открывать файл name для чтения.
Считывать информацию построчно (readline), пока считанная строка
не окажется пустой.
Во время считывания добавлять каждую строку в список all_data.
Этих операций достаточно, чтобы рассмотреть преимущество многопроцессного
 выполнения программы над линейным.
Создайте список названий файлов в соответствии с названиями файлов архива.
Вызовите функцию read_info для каждого файла по очереди (линейно) и
измерьте время выполнения и выведите его в консоль.
Вызовите функцию read_info для каждого файла, используя многопроцессный
подход: контекстный менеджер with и объект Pool. Для вызова функции
используйте метод map, передав в него функцию read_info и список названий
файлов. Измерьте время выполнения и выведите его в консоль.'''

import time
import multiprocessing


def read_info(name):
    all_data = []
    with open( name, 'r' ) as file:
        while True:
            line = file.readline()
            if not line:
                break
            all_data.append( line )


if __name__ == '__main__':

    file_list = [f'file {number}.txt' for number in range( 1, 5 )]

    start_time = time.time()
    for file_name in file_list:
        read_info( file_name )
    end_time = time.time()
    print( f'Линейное выполнение заняло {end_time - start_time} секунд' )

    start_time2 = time.time()
    with multiprocessing.Pool( processes=4 ) as pool:
        pool.map( read_info, file_list )
    end_time2 = time.time()
    print( f'Многопроцессорное выполнение заняло {end_time2 - start_time2} секунд' )
